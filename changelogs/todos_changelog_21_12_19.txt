TODOs and Changelog from 21/12/19

CHANGELOG:
[FORMAT: - dd/mm/yy: change + info]
some entries marked with an asterisk may have changed

- 21/12/19: started DSL for database traversal
- 28/12/19: added new command to add new tags
              - changed 'insert [in n] at n' to 'new data [in n] at n'
                and 'new tag [in n]'
- 28/12/19: added 'literal_input' to command line
          **  - when typing commands, the input that may be asked for by the
                command (e.g. the edit tag command) can be written alongside
                the command itself in percentage signs:
                >>> new tag; %date%; %1997%
          **  - the parser will parse them like commands so must be semicolon-
                separated, but they will be added to the input queue
                [CHANGED ON 01/01/20]
                [DEPRECATED ON 22/01/20]
- 28/12/19: changed 'edit tag name of \'name\'' to 'edit tag name \'name\''
- 28/12/19: added '[of n]' suffix to both tag editing commands
- 29/12/19: implemented base API functions (e.g. api.Tree.remove_node)
- 31/12/19: implemented the rest of the plugin hooks and input handlers in
            plugin.py
              - pre_node_creation_hook(data, depth, parents)
              - post_node_creation_hook(node)
              - tag_name_hook(node, old, new)
              - tag_name_input_handler(input)
              - tag_value_hook(node, tag, old, new)
              - tag_value_input_handler(input)
- 01/01/20: implemented framework in lexer/parser/structure for custom commands
- 01/01/20: each literal input is now NOT separated by semicolon
          **  - %input% may appear after main command any number of times, if
                any
              - semicolon only appears if new command follows
              [DEPRECATED ON 22/01/20]
- 01/01/20: added display_hook and prompt_string plugin hooks
- 09/01/20: changed default display so that it numbers the entries instead of
            bullet points them, to easily find the node number to write in
            commands
- 11/01/20: added detail of either token value or position in text where error
            occured in error message (depending on whether the parser or lexer
            raised it)
- 13/01/20: added wrapper around api.prompt (renamed from api.run) to call it
            and handle errors (NodeError, ProgramExit, SyntaxError)
              - any other errors are now 'unexpected' and will be raised
                (SyntaxError raised)
            anyway
- 13/01/20: started implementing default commands
              - moved Command class from structure.py to API
              - Command subclasses will have an Command.execute method which
                performs command
              - completed 'enter n' and 'exit' commands
- 14/01/20: split tag name/value editing into 2 separate commands
              - each command now will take the tag name as an input, not
                a part of the syntax
- 14/01/20: changed the parser so numbers, strings or literal inputs are
        **  all accepted under literal input
            [DEPRECATED ON 22/01/20]
- 14/01/20: return command now changed to 'return n' [n is optional input]
              - execute the return command n times, in effect
- 16/01/20: changed enter command to 'enter [n]*' to enter sub nodes more
            easily
              - e.g. 'enter 3 2' will enter the 2nd node of the 3rd node
                of the current
- 16/01/20: implemented 'remove [n]' command
- 16/01/20: default display hook now prints x.y.z which corresponds to the
            indexes of the children in the current traversal
- 16/01/20: Commmand subclasses now accept 'args', 'optional_args', 'inputs'
            'optional inputs'
- 17/01/20: inputs are now checked before the command is run
              - the method 'input_handler_x' will be called for input of name
                x
          **  - the method 'extra_input_handler' will be called for extra
                inputs (if command.variable_inputs=True)
              - the methods return a value for the input and raise either
                NodeError or InputError if the value is invalid
                [DEPRECATED ON 22/01/20]
- 17/01/20: added CLIParser.eat_keyword(kw) to eat TEXT tokens, but also
        **  checking that token.value == kw
            1TEXT changed to KEYWORD on 26/01/20]
- 17/01/20: parser now will resolve the name of a keyword to a custom command
            from the plugin, if defined
        **  - custom command must subclass api.CustomCommand
            - must have .id attribute (single word string) so that the parser
              knows which keyword it is for
            [CHANGED ON 27/01/20]
- 17/01/20: all commands must now have a .signature attribute to tell the
            parser how to parse it
              - signature = 'STRING of NUMBER' would be a signature to a
                command that accept a string and number input with a keyword
                between them
              - STRING or NUMBER where input is required
              - STRING? where optional input (same for number)
              - STRING* where variable input (same for number)
          **  - X ? Y where everything after Y is optional, but if one token
                is present, the whole part must be present (must be at the end)
                [CHANGED ON 21/01/20]
- 21/01/20: implemented SignatureLexer/SignatureParser to parse command
            signatures:
              - '[x y x]' means the parts inside the brackets are optional, but
                if x is present, y and z are expected to follow
              - x? means the SINGLE part is optional
              - x* means the SINGLE part can appear multiple times
              - STRING, NUMBER designate where inputs are (and obviously their
                type)
              - any lowercase words are keywords
- 22/01/20: 'literal_input' for commands with %input% is now deprecated: use
            either strings or numbers instead for inputs to arguments
- 22/01/20: command signatures must now assign names to inputs using '=name'
            syntax:
            - e.g. 'search for STRING=data in NUMBER=node'
            - goes after ? or * marks ('NUMBER*=num STRING?=data')
            - where the input handler 'extra_input_handler' was used for
              commands with variable args, this name is now deprecated
            - inputs that are variable (marked with *) will always be passed
              as a list, even if it contains a single input
              (therefore, input checkers will return a list of values too)
- 22/01/20: added optional Command.given_inputs attribute to assign
        **  pre-defined inputs to commands
            - this can be defined either in the class body or assigned to a
              single instance of an api.Command subclass
            - must be given as a dict whose keys are strings of the parameter
              names
            - if given, these arguments will be used as inputs (even if it
              is an empty dict)
            - e.g. the InCommand uses this to run the EnterCommand in its
              execute method
              [CHANGED ON 18/02/20]
- 22/01/20: post_commands list added as a secondary command queue whose
            commands are only run after ALL of the commands in the main queue
            have finished
            - InCommand uses this to enter a node, then queues a ReturnCommand
              after the next command(s) has finished
- 22/01/20: commands must now define an execute method that accepts arguments:
            - required arguments can be given by name, but any optional ones
              must have a default value as they may not be present in the
              input dict
- 22/01/20: new arg checking is all put into api.execute_command(command):
        **  - if Command.given_inputs is present, use this instead of
              Command.inputs
            - for each input in the whichever dict is used, the method
              'input_handler_x' will be called on the command object for an
              input named 'x'
            - (input handler methods can raise either NodeError or InputError
               to signal that the input is invalid, otherwise return a value
               to use)
            - finally, the command is run
              [CHANGED ON 18/02/20]
- 23/01/20: implemented InCommand to temporarily enter the given node to
            perform the next command(s), then return back to the parent:
            - currently does not protect against using the return command so
              it may return twice
            - the next commands to execute MUST be written in the same CLI
              prompt (separated by semicolons) so they all get executed in the
              same loop
- 26/01/20: for easier parsing, custom keyword tokens (e.g. ENTER, REMOVE) have
            been renamed to KEYWORD so that a single equality check can be
            carried out to check whether a token is a keyword
            - CLIParser.token_is_keyword(token, keyword) implemented to check
              whether token.value == keyword and token.type == KEYWORD
- 26/01/20: default ReturnCommand now raises an error if the number of depths
            to return is more than the current depth
- 27/01/20: added 'tests' class to api to hold input tests:
            - tests.not_empty -> bool
            - tests.integer -> can the input be converted to an int
            - tests.numerical -> can the input be converted to float
            - tests.non_whitespace -> is the input (str) only whitespace
            - tests.in_range(x, y) -> is input in the range (inclusive of both)
            - tests.greater_than(x), greater_equal(x), less_than(x),
              less_equal(x) -> does the input satisfy the operation
- 27/01/20: added test_input(input, message, *tests) to raise an error if any
            of the test functions fail (test functions must accept input as
            a single argument)
- 27/01/20: all custom commands must now subclass api.Command
            - (api.registry now contains the default commands too)
- 27/01/20: added optional Command.signature() FUNCTION to return a dynamic
            signature based on any condition (e.g. current node)
            - if different signatures have different input parameters, they all
              must be included in Command.execute(...) as optional arguments
              unless every possible signature generated has the same input
              names
        **  - if the methods returns False, the command classed as 'disabled'
              and it cannot be parsed at that point
        **  - (however, the command can still be executed when 'disabled'
               if is it instantiated by Command(), assigned inputs to
               Command.given_inputs and finally then executed)
              [CHANGED (both) ON 18/02/20]
- 27/01/20: added calls to plugin hooks in api.Tree base commands
- 28/10/20: moved plugin.py to plugins/plugin.py for future plans for multiple
            plugins
- 30/01/20: added optional attribute 'priority' that can be set on input
            handler functions to define the order in which inputs are checked:
            - priority 0 is default / undefined value (last)
            - higher priority means it will be checked first
- 30/01/20: re-implemented 'remove [n]' with new input checking and signature
            parsing
- 30/01/20: implemented 'new data at n [in n] \'data\'' command
            - this command uses the input handler priority check to validate
              'data' and 'node' before 'position'
- 31/01/20: changed main.py to __main__.py and data source is now sys.argv[1]
            - use 'python -m tagger <file>' to execute
- 06/02/20: when duplicate tag names are found in the data source, instead of
            being overwritten, they are accumulated into a list
- 06/02/20: added 'save' command which, at the moment, will save the current
        **  changes to 'output.txt' in the directory of the data source file7
            [ADDED TO ON 27/02/20]
- 07/02/20: at startup, the parser will use post_node_creation hook, AFTER the
            the node has had its tags added
- 07/02/20: parsers.construct_tree now also calls plugin hooks for tag names
            and values
- 07/02/20: added class AppendTagValueCommand (not implemented) to add to a tag
        **  that is/will become a list
            [IMPLEMENTED ON 27/02/20]
- 07/02/20: added api.Tree.new_tag and api.Tree.append_tag_value
- 07/02/20: implemented 'new tag [in n] \'name\' \'value?\''
- 07/02/20: added tests.is_valid_child_index(node, true_index=False) to check
            if a numerical input could be used as an index of a child node
        **  - true_index shifts the test values down by 1, so it treats the
              index as starting from 0, not 1 as default
            [ADDED TO ON 08/02/20]
- 08/02/20: 'edit tag value' command to accept any number of values (to
            combine into a list if multiple values added)
- 08/02/20: api.test_input now accepts a list as the 'message' argument which
            will select an error message based on the return value of the test
            function (indexes of the list)
- 08/02/20: registerd plugins will be printed out on startup
- 08/02/20: api.tests.is_valid_child_index will now return 0, 1, 2 to be used
            with dynamic messages in api.test_input:
            - return 0 if input not an integer
            - return 1 if input is 0 or less
            - return 2 if input exceeds upper limit
            - otherwise return True
- 09/02/20: added help command which can be triggered using either 'help' or
            '?':
            - accept an optional string argument which looks for a registered
              command
- 09/02/20: changed optional signature function in commands so they must return
            a signature:
            - to indicate whether disabled, create another method that
              return True (disabled) or False
      **     - this method must be a classmethod (use @classmethod decorator)
              or staticmethod
            [CHANGED ON 02/03/20]
- 11/02/20: command IDs can now be multiple words (space separated) e.g.
            the 'edit tag value' command
            - the pre-existing multi-word commands are no longer hard-coded
              in the parser
- 11/02/20: added api.Tree.remove_tag(tag, node=None) command
- 13/02/20: moved functions inside api.Tree to the global scope in api.py and
            api.Tree only holds the current node, traversal numbers and the
            structure.Root node
- 13/02/20: modified some commands to use new tests.is_valid_child_index test
- 13/02/20: added api.APIWarning class to indicate bad practice or possible
            errors that won't break the program
            - api.make_tree now raises a warning, not an error if the tree is
              overwritten
            - by default, warnings are printed but won't end the CLI
- 15/02/20: added api.resolve_child(indexes, node=None, offset=False) to
            check whether the list of indexes is valid path to a child i.e.
            check if the following is a valid child of the current node (or
            other node if given):
            - node.children[indexes[0]].children[indexes[1]]
              .children[indexes[2]]...children[indexes[n]]
            - if offset = True, assume the indexes start as 1, as opposed to 0
            - if the indexes are valid, the child node is returned, otherwise
              IndexError is raised
            - negative indexes are not allowed
            - 0 is nto allowed as an index if offset = True as it will
              become -1
- 16/02/20: added flags and changed command signatures:
        **  - flags are optional keywords in the form 'keyword!'
            - any modifiers (?, *) go after the whole element i.e.
              'NUMBER=arg?', 'STRING=data*'
            - flags are accessible in Command.inputs during execution (True or
              False bool values)
            - all inputs to the command are in Command.inputs even if not
              present
            - optional Command.given_inputs renamed to Command.inputs
            - Command.defaults is a dict containing default values for command
              parameter
            - if Command.defaults not found, input handlers for command inputs
              should return a default value (None will be passed as the
              'value' to indicate no argument given)
            - if the default value is found in Command.defaults and there is a
              matching input handler, it will NOT be called
              [CHANGED ON 19/02/20]
- 18/02/20: implemented OR and parenthesised phrases in command signatures:
            - pipe character '|' indicates OR - e.g. 'a|b' means the keyword
              'a' or 'b' must follow, but not both
            - parenthesised phrases use the form '(element+)' and cannot be
              empty
            - on their own, they will be parsed as if not present, but are used
              in OR expressions to group '(phrase_a) | (phrase_b)' (phrase_a
              OR phrase_b)
- 18/02/20: changed syntax of 'help' command to leverage dynamic signatures
            and flags:
            - instead of typing the command name enclosed in a string, now just
              type 'help command name' where 'command name' is a registered
              command
            - this uses a dynamic signature to return all of the command names
              separated by OR ('|')
- 19/02/20: changed flag command signature syntax to '<flag>' to accommodate
            multi-word flags:
            - syntax is the same: '<multi keyword flag>'
            - since spaces cannot be used as python parameter names in
              functions, names will have their spaces changed to underscores
              e.g. '<multi keyword flag>' passed as 'multi_keyword_flag'
            - mutually exclusive flags can be created by combining flags with
              OR - e.g. '<flag_a> | <flag_b>'
            - multi-keyword flags that are used in OR expressions do not need
              to be parenthesised since the '<...>' will enclose the flag's
              components into a single element anyway
- 19/02/20: added api.fill_missing_args(command, args) which returns a dict of
            inputs to the command, filling in missing values with their
            defaults (used when manaually executing command from other ones):
            - 'args' are the given arguments that will be passed
            - 'command' is the command being run
- 19/02/20: added api.manual_execute(command, args) so users can easily execute
            other functions from commands manually
            - 'command' should be the ID of the command, although instances
              or subclasses of Command are accepted
            - arguments will still be checked as they pass through
              api.execute_command(c)
- 20/02/20: fixed problem in SaveCommand that would remove description and
            author tags after saving due to use of dict.pop without making a
            copy of the dict first
- 20/02/20: parser now will not force the creation of empty 'description' and
        **  'author' tags if not present in the data source
            [CHANGED/DEPRECATED ON 23/02/20]
- 23/02/20: added api.warning(message) function to create wrapper around
            APIWarning class - don't use APIWarning on its own any more
- 23/02/20: author and description fields in data source are not longer
            required and must be written using tag syntax '`tag=value'
- 23/02/20: changed invocation of tagger program from command line - now uses
            argparse:
            - python -m tagger -d DATA [-w]
            - python -m tagger --data DATA --warnings
            - the data argument is required and is the data to parse
            - the warnings flag is to change treatment of API warnings:
              - if true (present), API warnings will exit the command/function
                in which they occured
              - if false (absent), API warnings will be printed, but won't end
                the current command
            - if an API warning occurs whilst parsing the data source and
              the warnings is true, then no data tree will be created and the
              program will crash
- 25/02/20: implemented 'append tag value' command
- 25/02/20: added prompt at the end of ExitCommand.execute that asks if the
            user has saved, to try and prevent accidental loss of modifications
- 25/02/20: 'new data' command now has the phrase 'at n' as an optional part;
            by default the position is the end of the current list of children
- 25/02/20: all API hooks must now be put into a class that subclasses
            api.Hooks
            - added api.Hooks class to allow this, with an __init_subclass__
              method
        **  - added api.HookDispatcher which makes the variable api.plugin
              behave as if it were a single imported file, but dispatches
              attribute accesses to the registry of API hooks
            - this adds support for multiple plugins at once
              [RENAMED HookDispatcher to NameDispatcher on 02/04/20]
- 25/02/20: api.tests.is_valid_child_index(n) now accepts a number as the
            input, as well as a node
            - the basis of the test is 0 < x <= num or, if true_index is true:
              0 <= x < num
- 27/02/20: to specify which plugin to use for a certain data source, the tag
            '`config=plugin' can be added as a tag of the root node which, when
            parsed, will initialise the given plugin file:
            - the plugin file will be checked for an api.Hooks subclass and
              these hooks will be registered, overwriting the default ones
              from plugin.py (they don't all have to be overwritten)
            - any other commands defined in the plugin file will be registered
            - any commands in other plugin files will be registerd, but any
              other api.Hooks subclasses will be ignored
            - if a tag appears before the config tag is parsed, it will NOT
              pass through the plugin hooks
- 27/02/20: moved tagger/plugins/plugin.py to tagger/plugin.py for use as the
            default/fallback plugin hooks
- 27/02/20: added example.py and default.py to contain the respective commands
- 27/02/20: the attribute Command.__doc__ or Command.description will be used
            by the help command as an additional piece of information
- 27/02/20: SaveCommand now has updated syntax 'save [as \'name\']'
        **  - will save as the given name in the directory of the data source
            - a prompt for overwrite will display if the given name already
              exists
            [ADDED TO ON 04/03/20]
- 02/03/20: Command.disabled() now now longer needs to be a staticmethod as
        **  api.resolve(c) returns a Command instance, not subclass and new
            api.is_disabled(command) will correctly handle both Command
            subclasses and instances
            - this also applies to dynamic Command.signature() where present
              [api.resolve RENAMED TO api.resolve_command]
- 02/03/20: certain commands that have a parameter 'node' that indicates a
            child node of the current now use a dynamic signature to remove
            this optional argument when the node has no children
- 02/03/20: InCommand now accepts multiple nodes (syntax: 'in n n*') like
            EnterCommand
- 03/03/20: added plugin hook inspect_commands(commands) where commands is a
            list of Command instances that are about to be executed
            - hook should return a list of commands
- 03/03/20: added plugin hook inspect_post_commands(commands) which functions
            the same as inspect_commands, but is called with api.post_commands
            after the initial commands in the normal queue have all been
            executed
            - hook should return a list of commands
- 04/03/20: numbers in CLI can now be negative, but only a single negative
            sign is allowed DIRECTLY in front of digits; that is, '-1' is
            allowed, but '- 1' and '--1' are invalid
- 04/03/20: added 'what' command in default.py which can help give the user
            info on current data - 1 of 6 things can be written as keywords
            after the command name:
            - 'what depth': display current depth
            - 'what title': display title of data tree
            - 'what position': display position of current node in its parent's
                               list of children
            - 'what plugin': display name of plugin file, if any
            - 'what commands': display help on ALL commands
            - 'what saved': displays whether the tree is saved or not
- 04/03/20: added api.edits(f) which should be used as a decorator on any
            function that may modify the data tree - this will edit the flag
            api.unsaved_changes which indicates the data tree is not saved
        **  - the base API functions e.g. api.edit_tag_name have this
              decorator applied to them, so, naturally, any command which
              calls one of these functions will update api.unsaved_changes
              and therefore command itself doesn't need to have this decorator
            [api.unsaved_changes MIGRATED TO api.log.unsaved_changes]
- 04/03/20: commands 'exit', 'save' and 'help' are now directly written in
            plugin.py and will come as pre-written commands
- 04/03/20: added tagger.parsers.ParserBase._previous attribute which will hold
            the token that has just been consumed (by ParserBase.eat)
- 04/03/20: 'save' command now has added syntax: 'save [as 'file'] and exit'
        **  which will directly call ExitCommand
            [ADDED TO ON 04/04/20]

[FINISHED ON 01/04/20]
[REMAINING TODOS MIGRATED TO todos_changelog_01_04_20]


IN PROGRESS:
implementing default commands - ones left to do:
- edit data
- edit tag name
- edit tag value


NEXT UP:
- add backward references or absolute references from root
- in api.manual_execute, add options to queue the command in command_queue or
  post_commands (with index)
- add ALL the plugin hooks for EACH API base function SEPRATELY
- dot parsing in command signatures (e.g. 2.1.3) and check if node.node.node is
  a valid or child that exists

TODO:

[API and plugins]

- consider adding a 'master' command execution hook so that a plugin can
  intercept command calls and delegate calls to their custom hooks instead
  of hard-coded hook names (for default commands)
  - commands will need to have IDs
  - this could allow plugins to interact

add back input_handler function and pre-written functions like
get_yes_or_no from the unseen pre-pre-release version

- add environment variables $depth $data (perhaps?)


[Commands-related things]
- add float/drop/copy commands
- add search option

- make the 'in' command safe for use with any command that may call
  api.Tree.return_from_node
- add search finally
- consider having an undo option

- make a general command queue object to hold both command queue lists as one
  and know where new commands should be added


[Input-related things]
None at the moment
