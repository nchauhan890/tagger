CHANGELOG:

Format:
- dd/mm/yy: change + brief info
            - extra info on indented line

Some entries marked with an asterisk may have changed:
[CHANGED ON dd/mm/yy]     -> a feature whose behaviour/implementation has
                              changed
[DEPRECATED ON dd/mm/yy]  -> a feature that has been removed
[IMPLEMENTED ON dd/mm/yy] -> a feature that was mentioned or whose framework
                              was added and has now been written
[ADDED TO ON dd/mm/yy]    -> a feature that has been added to

(Other specific changes may be written in square brackets too, if a certain
 reference in an older entry is still valid but something other than
 the feature itself has changed e.g. a renamed keyword)

The date on which a Github commit was made may also be present to easily see
what's changed between releases

- 01/04/20: fixed a bug with parsing commands (internal) where a flag
            was parsed as a keyword
            - bug discovered while using help command and error wrongly
              occured
            - fixed by moving flag parsing before keyword parsing in
              CLIParser.part_matches_token
- 01/04/20: api.new_tag now does call the 2 tag name plugin hooks as before
            it didn't which was incorrect
- 01/04/20: changed rendering of tags with multiple values in default display
            hook:
            - different items will render on new lines with commas at the end
              of each
            - the indent will match the end of the name of the tag + colon
- 02/04/20: added '-p' ('--plugins') option to command line interface
            (argparse) which can specify a specific directory in which to look
            for plugins other than in tagger/plugins
- 02/04/20: the 'config' tag of the root of a data tree which specifies which
            plugin file to use for hooks now requires that the file extension
            of the plugin file is given
- 02/04/20: changed + moved api.HookDispatcher to structure.NameDispatcher
- 02/04/20: added api.log to hold data about events (moved existing api
            variables into this too):
            - this uses structure.NameDispatcher like api.plugin to convert
              an attribute access into a dictionary lookup so all names can be
              accessed e.g. with 'api.log.unsaved_changes'
        **  - the names held in the log at the moment are:
              - 'unsaved_changes' (migrated from api.unsaved_changes) which is
                a bool indicating - to a certain extent - whether there are
                modifications to the data tree that have not been saved
                - this requires the use of api.edits as a decorator on
                  functions that modify the data tree (ones in the api like
                  api.new_tag already have this)
                - this only relies on the fact that the SaveCommand will
                  reset 'unsaved_changes' back to False
                - this won't take into account the possibility that the file
                  that had been saved to hasn't been deleted already
                - this doesn't take into account that any other command/hook
                  registered by other files may reset this value too
              - 'plugin_file' (migrated from api._config) which is a string
                containing the name of the plugin file given in the tag
                'config' of the root of the data tree (or None if not
                present)
              - 'plugin_loaded' (new) which is a bool indicating whether the
                plugin file was successfully loaded; it is True unless:
                - accessed before api.initialise_plugins has run, or
                - there is no plugin file given, or
                - the given plugin file was not found in tagger/plugins, or
                - (if an alternative plugins directory was given) the given
                  plugin file was not found in the alternative directory
              - 'warnings_on' (migrated from api.WARNING) which indicates
                whether the option '--warnings' ('-w') was present at startup
                - this value still could be changed (even temporarily) by
                  another plugin file
              - 'alternative_plugins_dir' which is a string of a path to the
                directory in which to search for plugins other than in
                tagger/plugins
                - this value can be changed, however if plugins have already
                  been initialised (api.initialise_plugins called), the
                  plugins in the new directory won't be automatically
                  registered unless api.initialise_plugins is called again
              - 'data source' which is a string of the path to the input data
        **  [ADDED TO ON 04/04/20]
            [ADDED TO ON 14/04/20]
- 02/04/20: added API hook 'api.plugin.startup_hook' which will be called as
            soon as the given plugin file ('config' tag of root) is loaded
            successfully
            - (api.initialise_plugin will call this hook)
- 02/04/20: changed plugin initialisation order so that now the function
            api.initialise_plugins will try to load the given plugin file
            before trying to import other command files so that the hook
            api.plugin.startup_hook is called as early as possible
- 02/04/20: after startup, the number of overridden hooks and new commands
            registered will be displayed
- 03/04/20: api.resolve renamed to api.resolve_command to remove ambiguity
            and so that its name matches similar command like
            api.resolve_signature
- 04/04/20: changed how api.test_input works with multiple error messages so
            now the error message will be chosen based on which input test
            function failed - functions should not return a number to
            correspond with an index
            - api.tests.is_valid_child_index changed so now it will return
              a list of the 3 test functions it holds (it still accepts a
              number or a Node object)
            - the list returned should be unpacked into api.test_input:
            - 'api.test_input(i, [msgs], *api.is_valid_child_index(n))
- 04/04/20: added api.is_node(node) to perform an instance check:
            - isinstance(node, (structure.Node, structure.Root))
- 04/04/20: implemented 'edit data' command and added api.edit_data(new, node)
            base function
- 04/04/20: added api.log.is_startup to indicate whether the program is
            in startup phase (initialising plugins and creating data tree)
            - this can be used in plugin hooks to use different behaviour
              at startup
- 04/04/20: structure.NameDispatcher(ref, warn) now also accepts the
            'warn' argument which will, if any value other than None, will
            make the dispatcher produce an APIWarning if a new name is added
            to its reference
            - the value of 'warn' is printed in the warning message so it
              should be a string
            - the name of the key being assigned to is added to the end of the
              warning message
            - api.log uses this to warn when a new log value is added
- 04/04/20: SaveCommand updated syntax 'save [as 'name'|current] [and exit]'
            - feature added is 'save as current' which will use
              api.log.data_source as the file name + directory to save the data
              tree to (it should be the same as the input data and therefore
              will overwrite it)
            - obviously, it is still possible for other plugins to modify the
              value of api.log.data_source
- 04/04/20: tagger.plugins.default.WhatCommand now can quit the listing of all
            of the commands' help entry by typing 'q'
[COMMITED ON 04/04/20]
- 06/04/20: cleaned up argparse help message
- 06/04/20: removed a legacy feature that allowed comments at the END of the
            data source to be ignored
- 06/04/20: structure.NameDispatcher accepts error_if_none argument which will
            raise an error if the value it returns is None - this is
            used by api.plugin to warn when (probably) the default plugin
            file was not registered instead of a generic NoneType TypeError
- 06/04/20: made it easier to manually call the CLI and perform setup:
            - added api.manual_setup(data_source, warnings, alt_plugins_dir)
              which will assign the corresponding value to api.log and import
              the default/fallback plugin hooks
            - __main__.py now uses this in combination with argparse
            - api.make_tree now accepts a file name instead of a direct text
              source with make_tree(file='<file>')
            - to manually call the CLI, follow these steps:
              - import the API with 'from tagger import api' or equivalent
              - call api.manual_setup(data_source, warnings, alt_plugins_dir):
                (all parameters are optional, but it must be called to import
                 the default plugin hooks)
              - now call api.make_tree(source=None, file=None) - if no data
                source was given, either 'source' or 'file' must be filled
              - now api.run() can be called
[COMMITTED ON 13/04/20]
- 13/04/20: added function api.priority(p) which should be used as a decorator
            on input handler functions to assign them a priority.
            - manually assigning by doing 'input_handler_x.priority = p'
              still works, but this method is clearer and quicker
            - default.NewDataCommand uses this with a negative priority (-1)
              for one parameter so that it gets checked last
            - other commands that now use the feature are default.InCommand,
              default.EnterCommand
- 13/04/20: added function api.may_return_none which should be used as a
            decorator on input handler functions that may return None as an
            actual value to use
            - this will skip the check in api.execute_command which will (now)
              raise an APIWarning if an input hander returns None because
              there is a greater chance that whoever wrote the function forgot
              to add a return statement to produce a value
            - the attribute input_handler_x.may_return_none can be manually
              set to True as this is what the function itself does
- 13/04/20: implemented command 'edit tag name'
- 14/04/20: fixed a problem where the program would crash when a file in a
            plugin directory is not a valid python file - instead the file is
            skipped
- 14/04/20: changed api._new_hooks and api._new_commands to
            api.log.new_hooks and api.log.new_commands
            - this records how many commands have been registered and how many
              hooks have been overriden (excluding the default hooks)
- 14/04/20: moved api._importing_commands to api.log.importing commands which
            is a boolean value indicating whether to only register commnads
            (and not hooks) from plugin files (at startup)
- 14/04/20: added api.reload_plugins and command 'reload <verbose>' which is
            found in plugin.ReloadCommand (command comes with the program)
            [FINISHED ON 04/06/20]
- 14/04/20: added sub-functions in api and renamed api.import_base_plugins
            to api._import_base_plugin:
            - api._import_plugin_file
            - api._import_other_plugins
            - api._import_alt_dir_plugins
- 04/06/20: fixed reload system to force reload by removing modules from
            sys.modules
- 04/06/20: all plugin files can now have a startup_hook() function in their
            namespace (NOT within an api.Hooks subclass) which will be called
            as soon as the plugin is loaded
- 04/06/20: added 'and clean' flag to 'reload' command:
            - signature is now 'reload <and clean> <verbose>
            - the presence of this flag will remove any commands that are no
              longer present in any plugin file instead of only adding new
              commands (same for hooks)
- 04/06/20: added api.compile_command(command_str, name) which will return a
            hidden Command subclass that executes the given command (string)
            as if it was typed into the CLI - used in BindCommand
            - command inspection hook will still be called
            - uses existing behaviour of api.prompt, however this has now been
              split into a new function
- 04/06/20: added BindCommand (comes with default package) which will create a
            new command whose .execute method will run the command string
            given, as if it was typed into the CLI
- 04/06/20: added AliasCommand (comes with default package) which will
            create an alias for a command
- 04/06/20: added api.tests.is_valid_command_name which is a list of 2 test
            commands to be unpacked in api.test_input (this does is an
            attribute of api.tests, not a function, so doesn't need to be
            called)
- 06/06/20: added structure.NodeType which is subclassed by both
            structure.Root and structure.Node to allow easier instance type
            checking
- 06/06/20: changed some python old .format strings to new f-strings
- 06/06/20: changed some command parsing semantics which caused an error as
            described below:
            - previously, the parser would stop at the first match when
              checking different parts of an OR expression in a command
              signature
            - this could cause an error when the parser would match a part
              not intended to be matched:
            - the signature '<option> | <option two>' would still match the
              first flag 'option' even when 'option two' may have been typed
              into the CLI because it was the first match
            - now, greedy parsing has been implemented so the parser will try
              to match the longest part out of all possible matches so that
              the longer option will be chosen when present and the shorter
              option is still matched when nothing else matches
- 06/06/20: changed command parsing semantics when parsing optional phrases
            and normal phrases so that they will only be parsed when the whole
            of the phrase is matched
- 06/06/20: fixed recursive dict problem in structure.NameDispatcher dispatch
            reference
- 07/06/20: changed some code in the lexer which should give a small speed
            increase by removing the likelihood of repeated index accesses to
            the same index
- 07/06/20: added docstrings to most of the functions in api/lexer/parser.py


**clean up files before committing**

IN PROGRESS:
implementing default commands - ones left to do:
- edit tag value


NEXT UP:


TODOS:

[API and plugins]

- consider adding a 'master' command execution hook so that a plugin can 
  intercept command calls and delegate calls to their custom hooks instead
  of hard-coded hook names (for default commands)
  - commands will need to have IDs
  - this could allow plugins to interact

add back input_handler function and pre-written functions like
get_yes_or_no from the unseen pre-pre-release version

- add environment variables $depth $data (perhaps?)
- add ALL the plugin hooks for EACH API base function SEPRATELY


[Commands-related things]
- add float/drop/copy commands
- add search option

- make the 'in' command safe for use with any command that may call
  api.Tree.return_from_node
- add search finally
- consider having an undo option

- make a general command queue object to hold both command queue lists as one
  and know where new commands should be added
- dot parsing in command signatures (e.g. 2.1.3) and check if node.node.node is
  a valid or child that exists

- add backward references or absolute references from root
- in api.manual_execute, add options to queue the command in command_queue or
  post_commands (with index)


[Input-related things]
- consider having the option to (import from/export to) JSON file as an
  alternative to the custom file format
